; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\uart.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\uart.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I../Library -I..\Library\CMSIS\Include -I..\Library\Device\Nuvoton\NUC029FAE\Include -I..\Library\StdDriver\inc -I..\Library\Sinyalizasyon\inc -I..\Template -IC:\Users\palad\AppData\Local\Arm\Packs\Nuvoton\NuMicro_DFP\1.3.18\Device\NUC029AE\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=537 --omf_browse=.\obj\uart.crf ..\Library\StdDriver\src\uart.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  UART_ClearIntFlag PROC
;;;36      */
;;;37     void UART_ClearIntFlag(UART_T* uart, uint32_t u32InterruptFlag)
000000  054a              LSLS     r2,r1,#21
;;;38     {
000002  d507              BPL      |L1.20|
;;;39     
;;;40         if(u32InterruptFlag & UART_ISR_RLS_INT_Msk)   /* clear Receive Line Status Interrupt */
;;;41         {
;;;42             uart->FSR |= UART_FSR_BIF_Msk | UART_FSR_FEF_Msk | UART_FSR_PEF_Msk;
000004  6982              LDR      r2,[r0,#0x18]
000006  2370              MOVS     r3,#0x70
000008  431a              ORRS     r2,r2,r3
00000a  6182              STR      r2,[r0,#0x18]
;;;43             uart->FSR |= UART_FSR_RS485_ADD_DETF_Msk;
00000c  6982              LDR      r2,[r0,#0x18]
00000e  2308              MOVS     r3,#8
000010  431a              ORRS     r2,r2,r3
000012  6182              STR      r2,[r0,#0x18]
                  |L1.20|
;;;44         }
;;;45     
;;;46         if(u32InterruptFlag & UART_ISR_MODEM_INT_Msk)  /* clear Modem Interrupt */
000014  050a              LSLS     r2,r1,#20
000016  d503              BPL      |L1.32|
;;;47             uart->MSR |= UART_MSR_DCTSF_Msk;
000018  6942              LDR      r2,[r0,#0x14]
00001a  2301              MOVS     r3,#1
00001c  431a              ORRS     r2,r2,r3
00001e  6142              STR      r2,[r0,#0x14]
                  |L1.32|
;;;48     
;;;49         if(u32InterruptFlag & UART_ISR_BUF_ERR_INT_Msk)   /* clear Buffer Error Interrupt */
000020  048a              LSLS     r2,r1,#18
000022  d503              BPL      |L1.44|
;;;50         {
;;;51             uart->FSR |= UART_FSR_RX_OVER_IF_Msk | UART_FSR_TX_OVER_IF_Msk;
000024  6982              LDR      r2,[r0,#0x18]
000026  4b6e              LDR      r3,|L1.480|
000028  431a              ORRS     r2,r2,r3
00002a  6182              STR      r2,[r0,#0x18]
                  |L1.44|
;;;52         }
;;;53     
;;;54         if(u32InterruptFlag & UART_ISR_TOUT_INT_Msk)  /* clear Modem Interrupt */
00002c  04c9              LSLS     r1,r1,#19
00002e  d503              BPL      |L1.56|
;;;55             uart->ISR |= UART_ISR_TOUT_IF_Msk;
000030  69c1              LDR      r1,[r0,#0x1c]
000032  2210              MOVS     r2,#0x10
000034  4311              ORRS     r1,r1,r2
000036  61c1              STR      r1,[r0,#0x1c]
                  |L1.56|
;;;56     
;;;57     }
000038  4770              BX       lr
;;;58     
                          ENDP

                  UART_Close PROC
;;;66      */
;;;67     void UART_Close(UART_T* uart)
00003a  2100              MOVS     r1,#0
;;;68     {
;;;69         uart->IER = 0;
00003c  6041              STR      r1,[r0,#4]
;;;70     }
00003e  4770              BX       lr
;;;71     
                          ENDP

                  UART_DisableFlowCtrl PROC
;;;79      */
;;;80     void UART_DisableFlowCtrl(UART_T* uart)
000040  6841              LDR      r1,[r0,#4]
;;;81     {
;;;82         uart->IER &= ~(UART_IER_AUTO_RTS_EN_Msk | UART_IER_AUTO_CTS_EN_Msk);
000042  2203              MOVS     r2,#3
000044  0312              LSLS     r2,r2,#12
000046  4391              BICS     r1,r1,r2
000048  6041              STR      r1,[r0,#4]
;;;83     }
00004a  4770              BX       lr
;;;84     
                          ENDP

                  UART_DisableInt PROC
;;;101     */
;;;102    void UART_DisableInt(UART_T*  uart, uint32_t u32InterruptFlag )
00004c  6842              LDR      r2,[r0,#4]
;;;103    {
;;;104        uart->IER &= ~ u32InterruptFlag;
00004e  438a              BICS     r2,r2,r1
000050  6042              STR      r2,[r0,#4]
;;;105    }
000052  4770              BX       lr
;;;106    
                          ENDP

                  UART_EnableFlowCtrl PROC
;;;115     */
;;;116    void UART_EnableFlowCtrl(UART_T* uart )
000054  6901              LDR      r1,[r0,#0x10]
;;;117    {
;;;118        uart->MCR |= UART_MCR_LEV_RTS_Msk;
000056  2201              MOVS     r2,#1
000058  0252              LSLS     r2,r2,#9
00005a  4311              ORRS     r1,r1,r2
00005c  6101              STR      r1,[r0,#0x10]
;;;119        uart->MCR &= UART_MCR_RTS_Msk;
00005e  6901              LDR      r1,[r0,#0x10]
000060  2202              MOVS     r2,#2
000062  4011              ANDS     r1,r1,r2
000064  6101              STR      r1,[r0,#0x10]
;;;120        uart->MSR |= UART_MSR_LEV_CTS_Msk;
000066  6941              LDR      r1,[r0,#0x14]
000068  01d2              LSLS     r2,r2,#7
00006a  4311              ORRS     r1,r1,r2
00006c  6141              STR      r1,[r0,#0x14]
;;;121        uart->IER |= UART_IER_AUTO_RTS_EN_Msk | UART_IER_AUTO_CTS_EN_Msk;
00006e  6841              LDR      r1,[r0,#4]
000070  2203              MOVS     r2,#3
000072  0312              LSLS     r2,r2,#12
000074  4311              ORRS     r1,r1,r2
000076  6041              STR      r1,[r0,#4]
;;;122    }
000078  4770              BX       lr
;;;123    
                          ENDP

                  UART_EnableInt PROC
;;;140     */
;;;141    void UART_EnableInt(UART_T*  uart, uint32_t u32InterruptFlag )
00007a  6842              LDR      r2,[r0,#4]
;;;142    {
;;;143        uart->IER |= u32InterruptFlag;
00007c  430a              ORRS     r2,r2,r1
00007e  6042              STR      r2,[r0,#4]
;;;144    }
000080  4770              BX       lr
;;;145    
                          ENDP

                  UART_Open PROC
;;;154     */
;;;155    void UART_Open(UART_T* uart, uint32_t u32baudrate)
000082  b57f              PUSH     {r0-r6,lr}
;;;156    {
000084  4604              MOV      r4,r0
;;;157        uint8_t u8UartClkSrcSel;
;;;158        uint32_t u32ClkTbl[4] = {__XTAL, 0, __IRC22M, __IRC22M};
000086  4857              LDR      r0,|L1.484|
000088  460d              MOV      r5,r1                 ;156
00008a  c80f              LDM      r0,{r0-r3}
00008c  466e              MOV      r6,sp
00008e  c60f              STM      r6!,{r0-r3}
;;;159        uint32_t u32Baud_Div;
;;;160        u8UartClkSrcSel = (CLK->CLKSEL1 & CLK_CLKSEL1_UART_S_Msk) >> CLK_CLKSEL1_UART_S_Pos;
000090  4855              LDR      r0,|L1.488|
000092  6940              LDR      r0,[r0,#0x14]
;;;161    
;;;162        uart->FUN_SEL = UART_FUNC_SEL_UART;
;;;163        uart->LCR = UART_WORD_LEN_8 | UART_PARITY_NONE | UART_STOP_BIT_1;
;;;164        uart->FCR = UART_FCR_RFITL_1BYTE | UART_FCR_RTS_TRI_LEV_1BYTE;
;;;165    
;;;166        if(u32baudrate != 0)
;;;167        {
;;;168            u32Baud_Div = UART_BAUD_MODE2_DIVIDER(u32ClkTbl[u8UartClkSrcSel], u32baudrate);
;;;169    
;;;170            if(u32Baud_Div > 0xFFFF)
;;;171                uart->BAUD = (UART_BAUD_MODE0 | UART_BAUD_MODE0_DIVIDER(u32ClkTbl[u8UartClkSrcSel], u32baudrate));
;;;172            else
;;;173                uart->BAUD = (UART_BAUD_MODE2 | u32Baud_Div);
;;;174        }
;;;175    }
000094  2203              MOVS     r2,#3
000096  0180              LSLS     r0,r0,#6
000098  0f80              LSRS     r0,r0,#30
00009a  2100              MOVS     r1,#0                 ;162
00009c  6321              STR      r1,[r4,#0x30]         ;162
00009e  60e2              STR      r2,[r4,#0xc]          ;163
0000a0  60a1              STR      r1,[r4,#8]            ;164
0000a2  2d00              CMP      r5,#0                 ;166
0000a4  d017              BEQ      |L1.214|
0000a6  0081              LSLS     r1,r0,#2              ;168
0000a8  4668              MOV      r0,sp                 ;168
0000aa  5846              LDR      r6,[r0,r1]            ;168
0000ac  0868              LSRS     r0,r5,#1              ;168
0000ae  1830              ADDS     r0,r6,r0              ;168
0000b0  4629              MOV      r1,r5                 ;168
0000b2  f7fffffe          BL       __aeabi_uidivmod
0000b6  494d              LDR      r1,|L1.492|
0000b8  1e80              SUBS     r0,r0,#2              ;170
0000ba  4288              CMP      r0,r1                 ;170
0000bc  d907              BLS      |L1.206|
0000be  00e8              LSLS     r0,r5,#3              ;171
0000c0  1830              ADDS     r0,r6,r0              ;171
0000c2  4629              MOV      r1,r5                 ;171
0000c4  f7fffffe          BL       __aeabi_uidivmod
0000c8  0900              LSRS     r0,r0,#4              ;171
0000ca  1e80              SUBS     r0,r0,#2              ;171
0000cc  e002              B        |L1.212|
                  |L1.206|
0000ce  2103              MOVS     r1,#3                 ;173
0000d0  0709              LSLS     r1,r1,#28             ;173
0000d2  4308              ORRS     r0,r0,r1              ;173
                  |L1.212|
0000d4  6260              STR      r0,[r4,#0x24]         ;173
                  |L1.214|
0000d6  bd7f              POP      {r0-r6,pc}
;;;176    
                          ENDP

                  UART_Read PROC
;;;187     */
;;;188    uint32_t UART_Read(UART_T* uart, uint8_t *pu8RxBuf, uint32_t u32ReadBytes)
0000d8  b570              PUSH     {r4-r6,lr}
;;;189    {
0000da  4604              MOV      r4,r0
;;;190        uint32_t  u32Count, u32delayno;
;;;191    
;;;192        for(u32Count=0; u32Count < u32ReadBytes; u32Count++)
0000dc  2000              MOVS     r0,#0
;;;193        {
;;;194            u32delayno = 0;
;;;195    
;;;196            while(uart->FSR & UART_FSR_RX_EMPTY_Msk)   /* Check RX empty => failed */
;;;197            {
;;;198                u32delayno++;
;;;199                if( u32delayno >= 0x40000000 )
0000de  2501              MOVS     r5,#1
0000e0  07ad              LSLS     r5,r5,#30
0000e2  e00c              B        |L1.254|
                  |L1.228|
0000e4  2300              MOVS     r3,#0                 ;194
0000e6  e004              B        |L1.242|
                  |L1.232|
0000e8  1c5b              ADDS     r3,r3,#1              ;196
0000ea  42ab              CMP      r3,r5
0000ec  d301              BCC      |L1.242|
;;;200                    return FALSE;
0000ee  2000              MOVS     r0,#0
;;;201            }
;;;202            pu8RxBuf[u32Count] = uart->RBR;    /* Get Data from UART RX  */
;;;203        }
;;;204    
;;;205        return u32Count;
;;;206    
;;;207    }
0000f0  bd70              POP      {r4-r6,pc}
                  |L1.242|
0000f2  69a6              LDR      r6,[r4,#0x18]         ;196
0000f4  0476              LSLS     r6,r6,#17             ;196
0000f6  d4f7              BMI      |L1.232|
0000f8  6823              LDR      r3,[r4,#0]            ;202
0000fa  540b              STRB     r3,[r1,r0]            ;202
0000fc  1c40              ADDS     r0,r0,#1              ;202
                  |L1.254|
0000fe  4290              CMP      r0,r2                 ;192
000100  d3f0              BCC      |L1.228|
000102  bd70              POP      {r4-r6,pc}
;;;208    
                          ENDP

                  UART_SetLine_Config PROC
;;;221     */
;;;222    void UART_SetLine_Config(UART_T* uart, uint32_t u32baudrate, uint32_t u32data_width, uint32_t u32parity, uint32_t  u32stop_bits)
000104  b5ff              PUSH     {r0-r7,lr}
;;;223    {
;;;224        uint8_t u8UartClkSrcSel;
;;;225        uint32_t u32ClkTbl[4] = {__XTAL, 0, __IRC22M, __IRC22M};
000106  4b37              LDR      r3,|L1.484|
000108  4616              MOV      r6,r2                 ;223
00010a  460c              MOV      r4,r1                 ;223
00010c  4605              MOV      r5,r0                 ;223
00010e  3310              ADDS     r3,r3,#0x10
000110  cb0f              LDM      r3,{r0-r3}
000112  b085              SUB      sp,sp,#0x14           ;223
000114  466f              MOV      r7,sp
000116  c70f              STM      r7!,{r0-r3}
;;;226        uint32_t u32Baud_Div = 0;
;;;227        u8UartClkSrcSel = (CLK->CLKSEL1 & CLK_CLKSEL1_UART_S_Msk) >> CLK_CLKSEL1_UART_S_Pos;
000118  4833              LDR      r0,|L1.488|
00011a  6940              LDR      r0,[r0,#0x14]
;;;228    
;;;229        if(u32baudrate != 0)
;;;230        {
;;;231            u32Baud_Div = UART_BAUD_MODE2_DIVIDER(u32ClkTbl[u8UartClkSrcSel], u32baudrate);
;;;232    
;;;233            if(u32Baud_Div > 0xFFFF)
;;;234                uart->BAUD = (UART_BAUD_MODE0 | UART_BAUD_MODE0_DIVIDER(u32ClkTbl[u8UartClkSrcSel], u32baudrate));
;;;235            else
;;;236                uart->BAUD = (UART_BAUD_MODE2 | u32Baud_Div);
;;;237        }
;;;238    
;;;239        uart->LCR = u32data_width | u32parity | u32stop_bits;
;;;240    }
00011c  0180              LSLS     r0,r0,#6
00011e  0f80              LSRS     r0,r0,#30
000120  2c00              CMP      r4,#0                 ;229
000122  d017              BEQ      |L1.340|
000124  0081              LSLS     r1,r0,#2              ;231
000126  4668              MOV      r0,sp                 ;231
000128  5847              LDR      r7,[r0,r1]            ;231
00012a  0860              LSRS     r0,r4,#1              ;231
00012c  1838              ADDS     r0,r7,r0              ;231
00012e  4621              MOV      r1,r4                 ;231
000130  f7fffffe          BL       __aeabi_uidivmod
000134  492d              LDR      r1,|L1.492|
000136  1e80              SUBS     r0,r0,#2              ;233
000138  4288              CMP      r0,r1                 ;233
00013a  d907              BLS      |L1.332|
00013c  00e0              LSLS     r0,r4,#3              ;234
00013e  1838              ADDS     r0,r7,r0              ;234
000140  4621              MOV      r1,r4                 ;234
000142  f7fffffe          BL       __aeabi_uidivmod
000146  0900              LSRS     r0,r0,#4              ;234
000148  1e80              SUBS     r0,r0,#2              ;234
00014a  e002              B        |L1.338|
                  |L1.332|
00014c  2103              MOVS     r1,#3                 ;236
00014e  0709              LSLS     r1,r1,#28             ;236
000150  4308              ORRS     r0,r0,r1              ;236
                  |L1.338|
000152  6268              STR      r0,[r5,#0x24]         ;234
                  |L1.340|
000154  9808              LDR      r0,[sp,#0x20]         ;239
000156  4306              ORRS     r6,r6,r0              ;239
000158  980e              LDR      r0,[sp,#0x38]         ;239
00015a  4306              ORRS     r6,r6,r0              ;239
00015c  60ee              STR      r6,[r5,#0xc]          ;239
00015e  b009              ADD      sp,sp,#0x24
000160  bdf0              POP      {r4-r7,pc}
;;;241    
                          ENDP

                  UART_SetTimeoutCnt PROC
;;;250     */
;;;251    void UART_SetTimeoutCnt(UART_T* uart, uint32_t u32TOC)
000162  6a02              LDR      r2,[r0,#0x20]
;;;252    {
;;;253        uart->TOR = (uart->TOR & ~UART_TOR_TOIC_Msk)| (u32TOC);
000164  0a12              LSRS     r2,r2,#8
000166  0212              LSLS     r2,r2,#8
000168  430a              ORRS     r2,r2,r1
00016a  6202              STR      r2,[r0,#0x20]
;;;254        uart->IER |= UART_IER_TIME_OUT_EN_Msk;
00016c  6841              LDR      r1,[r0,#4]
00016e  2201              MOVS     r2,#1
000170  02d2              LSLS     r2,r2,#11
000172  4311              ORRS     r1,r1,r2
000174  6041              STR      r1,[r0,#4]
;;;255    }
000176  4770              BX       lr
;;;256    
                          ENDP

                  UART_SelectIrDAMode PROC
;;;266     */
;;;267    void UART_SelectIrDAMode(UART_T* uart, uint32_t u32Buadrate, uint32_t u32Direction)
000178  210b              MOVS     r1,#0xb
;;;268    {
;;;269        uart->BAUD = UART_BAUD_MODE0 | UART_BAUD_MODE0_DIVIDER(12000000, 57600);
00017a  6241              STR      r1,[r0,#0x24]
;;;270    
;;;271        uart->IRCR    &=  ~UART_IRCR_INV_TX_Msk;
00017c  6a81              LDR      r1,[r0,#0x28]
00017e  2320              MOVS     r3,#0x20
000180  4399              BICS     r1,r1,r3
000182  6281              STR      r1,[r0,#0x28]
;;;272        uart->IRCR |=     UART_IRCR_INV_RX_Msk;
000184  6a81              LDR      r1,[r0,#0x28]
000186  2340              MOVS     r3,#0x40
000188  4319              ORRS     r1,r1,r3
00018a  6281              STR      r1,[r0,#0x28]
;;;273        uart->IRCR    = u32Direction ? uart->IRCR | UART_IRCR_TX_SELECT_Msk : uart->IRCR &~ UART_IRCR_TX_SELECT_Msk;
00018c  2302              MOVS     r3,#2
00018e  6a81              LDR      r1,[r0,#0x28]
000190  2a00              CMP      r2,#0
000192  d001              BEQ      |L1.408|
000194  4319              ORRS     r1,r1,r3
000196  e000              B        |L1.410|
                  |L1.408|
000198  4399              BICS     r1,r1,r3
                  |L1.410|
00019a  6281              STR      r1,[r0,#0x28]
;;;274        uart->FUN_SEL = (0x2 << UART_FUN_SEL_FUN_SEL_Pos);
00019c  6303              STR      r3,[r0,#0x30]
;;;275    }
00019e  4770              BX       lr
;;;276    
                          ENDP

                  UART_SelectRS485Mode PROC
;;;286     */
;;;287    void UART_SelectRS485Mode(UART_T* uart, uint32_t u32Mode, uint32_t u32Addr)
0001a0  2303              MOVS     r3,#3
;;;288    {
;;;289        uart->FUN_SEL = UART_FUNC_SEL_RS485;
0001a2  6303              STR      r3,[r0,#0x30]
;;;290        uart->ALT_CSR = 0;
0001a4  2300              MOVS     r3,#0
0001a6  62c3              STR      r3,[r0,#0x2c]
;;;291        uart->ALT_CSR |= u32Mode | (u32Addr << UART_ALT_CSR_ADDR_MATCH_Pos);
0001a8  6ac3              LDR      r3,[r0,#0x2c]
0001aa  0612              LSLS     r2,r2,#24
0001ac  430a              ORRS     r2,r2,r1
0001ae  4313              ORRS     r3,r3,r2
0001b0  62c3              STR      r3,[r0,#0x2c]
;;;292    }
0001b2  4770              BX       lr
;;;293    
                          ENDP

                  UART_Write PROC
;;;303     */
;;;304    uint32_t UART_Write(UART_T* uart,uint8_t *pu8TxBuf, uint32_t u32WriteBytes)
0001b4  b570              PUSH     {r4-r6,lr}
;;;305    {
0001b6  4604              MOV      r4,r0
;;;306        uint32_t  u32Count, u32delayno;
;;;307    
;;;308        for(u32Count=0; u32Count != u32WriteBytes; u32Count++)
0001b8  2000              MOVS     r0,#0
;;;309        {
;;;310            u32delayno = 0;
;;;311            while((uart->FSR & UART_FSR_TE_FLAG_Msk) == 0)   /* Wait Tx empty and Time-out manner */
;;;312            {
;;;313                u32delayno++;
;;;314                if( u32delayno >= 0x40000000 )
0001ba  2501              MOVS     r5,#1
0001bc  07ad              LSLS     r5,r5,#30
0001be  e00c              B        |L1.474|
                  |L1.448|
0001c0  2300              MOVS     r3,#0                 ;310
0001c2  e004              B        |L1.462|
                  |L1.452|
0001c4  1c5b              ADDS     r3,r3,#1              ;311
0001c6  42ab              CMP      r3,r5
0001c8  d301              BCC      |L1.462|
;;;315                    return FALSE;
0001ca  2000              MOVS     r0,#0
;;;316            }
;;;317            uart->THR = pu8TxBuf[u32Count];    /* Send UART Data from buffer */
;;;318        }
;;;319    
;;;320        return u32Count;
;;;321    
;;;322    }
0001cc  bd70              POP      {r4-r6,pc}
                  |L1.462|
0001ce  69a6              LDR      r6,[r4,#0x18]         ;311
0001d0  00f6              LSLS     r6,r6,#3              ;311
0001d2  d5f7              BPL      |L1.452|
0001d4  5c0b              LDRB     r3,[r1,r0]            ;317
0001d6  6023              STR      r3,[r4,#0]            ;317
0001d8  1c40              ADDS     r0,r0,#1              ;317
                  |L1.474|
0001da  4290              CMP      r0,r2                 ;308
0001dc  d1f0              BNE      |L1.448|
0001de  bd70              POP      {r4-r6,pc}
;;;323    
                          ENDP

                  |L1.480|
                          DCD      0x01000001
                  |L1.484|
                          DCD      ||.constdata||
                  |L1.488|
                          DCD      0x50000200
                  |L1.492|
                          DCD      0x0000ffff

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x00b71b00
                          DCD      0x00000000
                          DCD      0x01518000
                          DCD      0x01518000
                          DCD      0x00b71b00
                          DCD      0x00000000
                          DCD      0x01518000
                          DCD      0x01518000

;*** Start embedded assembler ***

#line 1 "..\\Library\\StdDriver\\src\\uart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_uart_c_f12f5b44____REV16|
#line 388 "..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_uart_c_f12f5b44____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_uart_c_f12f5b44____REVSH|
#line 402
|__asm___6_uart_c_f12f5b44____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
