; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\ticker.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\ticker.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I../Library -I..\Library\CMSIS\Include -I..\Library\Device\Nuvoton\NUC029FAE\Include -I..\Library\StdDriver\inc -I..\Library\Sinyalizasyon\inc -I..\Template -IC:\Users\palad\AppData\Local\Arm\Packs\Nuvoton\NuMicro_DFP\1.3.18\Device\NUC029AE\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=537 --omf_browse=.\obj\ticker.crf ..\Library\Sinyalizasyon\src\ticker.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  TMR0_IRQHandler PROC
;;;6      
;;;7      void TMR0_IRQHandler(void)
000000  4828              LDR      r0,|L1.164|
;;;8      {
;;;9      	_tick++;
000002  6801              LDR      r1,[r0,#0]  ; _tick
000004  1c49              ADDS     r1,r1,#1
000006  6001              STR      r1,[r0,#0]  ; _tick
;;;10     	// clear timer interrupt flag
;;;11     	TIMER0->TISR = TIMER_TISR_TIF_Msk;
000008  4927              LDR      r1,|L1.168|
00000a  2001              MOVS     r0,#1
00000c  6088              STR      r0,[r1,#8]
;;;12     }
00000e  4770              BX       lr
;;;13     
                          ENDP

                  TMR1_IRQHandler PROC
;;;14     void TMR1_IRQHandler(void)
000010  4824              LDR      r0,|L1.164|
;;;15     {
;;;16     	_tick++;
000012  6801              LDR      r1,[r0,#0]  ; _tick
000014  1c49              ADDS     r1,r1,#1
000016  6001              STR      r1,[r0,#0]  ; _tick
;;;17     	// clear timer interrupt flag
;;;18     	TIMER1->TISR = TIMER_TISR_TIF_Msk;
000018  4923              LDR      r1,|L1.168|
00001a  2001              MOVS     r0,#1
00001c  6288              STR      r0,[r1,#0x28]
;;;19     }
00001e  4770              BX       lr
;;;20     
                          ENDP

                  startTicker PROC
;;;25      */
;;;26     void startTicker(TIMER_T *timer)
000020  b570              PUSH     {r4-r6,lr}
;;;27     {
000022  4601              MOV      r1,r0
;;;28     
;;;29     	if (!TIMER_IS_ACTIVE(timer))
000024  6800              LDR      r0,[r0,#0]
;;;30     	{
;;;31     		if (timer == TIMER0)
;;;32     			CLK->APBCLK |= CLK_APBCLK_TMR0_EN_Msk;
;;;33     		if (timer == TIMER1)
000026  4d20              LDR      r5,|L1.168|
000028  0180              LSLS     r0,r0,#6              ;29
00002a  4c1f              LDR      r4,|L1.168|
00002c  3520              ADDS     r5,r5,#0x20
;;;34     			CLK->APBCLK |= CLK_APBCLK_TMR1_EN_Msk;
00002e  2608              MOVS     r6,#8
000030  2800              CMP      r0,#0                 ;29
000032  db0b              BLT      |L1.76|
000034  481d              LDR      r0,|L1.172|
000036  42a1              CMP      r1,r4                 ;31
000038  d103              BNE      |L1.66|
00003a  6882              LDR      r2,[r0,#8]            ;32
00003c  2304              MOVS     r3,#4                 ;32
00003e  431a              ORRS     r2,r2,r3              ;32
000040  6082              STR      r2,[r0,#8]            ;32
                  |L1.66|
000042  42a9              CMP      r1,r5                 ;33
000044  d102              BNE      |L1.76|
000046  6882              LDR      r2,[r0,#8]
000048  4332              ORRS     r2,r2,r6
00004a  6082              STR      r2,[r0,#8]
                  |L1.76|
;;;35     	}
;;;36     
;;;37     	uint32_t compareDivider, prescaler;
;;;38     
;;;39     	// (pre+1)/comp = tick interval
;;;40     	prescaler = 1;
;;;41     	compareDivider = 2000;
;;;42     	// Tick every 1 ms
;;;43     
;;;44     	timer->TCMPR = (CPU_FREQ / compareDivider);
00004c  4818              LDR      r0,|L1.176|
00004e  6048              STR      r0,[r1,#4]
;;;45     	timer->TCSR = TIMER_TCSR_CEN_Msk | TIMER_TCSR_IE_Msk | TIMER_PERIODIC_MODE | (prescaler);
000050  4818              LDR      r0,|L1.180|
000052  6008              STR      r0,[r1,#0]
000054  4818              LDR      r0,|L1.184|
;;;46     
;;;47     	// Enable ADC interrupt
;;;48     	if (timer == TIMER0)
000056  42a1              CMP      r1,r4
000058  d102              BNE      |L1.96|
00005a  22ff              MOVS     r2,#0xff
00005c  3201              ADDS     r2,#1
00005e  6002              STR      r2,[r0,#0]
                  |L1.96|
;;;49     		NVIC_EnableIRQ(TMR0_IRQn);
;;;50     	if (timer == TIMER1)
000060  42a9              CMP      r1,r5
000062  d102              BNE      |L1.106|
000064  2101              MOVS     r1,#1
000066  0249              LSLS     r1,r1,#9
000068  6001              STR      r1,[r0,#0]
                  |L1.106|
;;;51     		NVIC_EnableIRQ(TMR1_IRQn);
;;;52     }
00006a  bd70              POP      {r4-r6,pc}
;;;53     
                          ENDP

                  stopTicker PROC
;;;58      */
;;;59     void stopTicker(TIMER_T *timer)
00006c  4912              LDR      r1,|L1.184|
;;;60     {
;;;61     	if (timer == TIMER0)
00006e  4a0e              LDR      r2,|L1.168|
000070  3180              ADDS     r1,r1,#0x80
000072  4290              CMP      r0,r2
000074  d101              BNE      |L1.122|
000076  1582              ASRS     r2,r0,#22             ;60
000078  600a              STR      r2,[r1,#0]            ;60
                  |L1.122|
;;;62     		NVIC_DisableIRQ(TMR0_IRQn);
;;;63     	if (timer == TIMER1)
00007a  4a0b              LDR      r2,|L1.168|
00007c  3220              ADDS     r2,r2,#0x20
00007e  4290              CMP      r0,r2
000080  d101              BNE      |L1.134|
000082  1540              ASRS     r0,r0,#21
000084  6008              STR      r0,[r1,#0]
                  |L1.134|
;;;64     		NVIC_DisableIRQ(TMR1_IRQn);
;;;65     }
000086  4770              BX       lr
;;;66     
                          ENDP

                  getTick PROC
;;;71      */
;;;72     uint32_t getTick()
000088  4806              LDR      r0,|L1.164|
;;;73     {
;;;74     	return _tick;
00008a  6800              LDR      r0,[r0,#0]  ; _tick
;;;75     }
00008c  4770              BX       lr
;;;76     
                          ENDP

                  delay PROC
;;;81      */
;;;82     void delay(uint32_t delayMs)
00008e  4905              LDR      r1,|L1.164|
;;;83     {
;;;84     	static uint32_t prevTick = 0;
;;;85     
;;;86     	while (_tick - prevTick < delayMs)
;;;87     		__NOP();
000090  684a              LDR      r2,[r1,#4]
000092  e000              B        |L1.150|
                  |L1.148|
000094  bf00              NOP      
                  |L1.150|
000096  680b              LDR      r3,[r1,#0]            ;86  ; _tick
000098  1a9b              SUBS     r3,r3,r2              ;86
00009a  4283              CMP      r3,r0                 ;86
00009c  d3fa              BCC      |L1.148|
;;;88     
;;;89     	prevTick = _tick;
00009e  6808              LDR      r0,[r1,#0]  ; _tick
0000a0  6048              STR      r0,[r1,#4]  ; prevTick
;;;90     }
0000a2  4770              BX       lr
                          ENDP

                  |L1.164|
                          DCD      ||.data||
                  |L1.168|
                          DCD      0x40010000
                  |L1.172|
                          DCD      0x50000200
                  |L1.176|
                          DCD      0x00002b33
                  |L1.180|
                          DCD      0x68000001
                  |L1.184|
                          DCD      0xe000e100

                          AREA ||.data||, DATA, ALIGN=2

                  _tick
                          DCD      0x00000000
                  prevTick
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\Library\\Sinyalizasyon\\src\\ticker.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_ticker_c__tick____REV16|
#line 388 "..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___8_ticker_c__tick____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_ticker_c__tick____REVSH|
#line 402
|__asm___8_ticker_c__tick____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
