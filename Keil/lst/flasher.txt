; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\flasher.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\flasher.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\Library\CMSIS\Include -I..\Library\Device\Nuvoton\NUC029FAE\Include -I..\Library\StdDriver\inc -I..\Library\Sinyalizasyon\inc -I..\Template -IC:\Users\palad\AppData\Local\Arm\Packs\Nuvoton\NuMicro_DFP\1.3.18\Device\NUC029AE\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=537 --omf_browse=.\obj\flasher.crf ..\flasher.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  flasherInit PROC
;;;16      */
;;;17     void flasherInit()
000000  b51c              PUSH     {r2-r4,lr}
;;;18     {
;;;19     
;;;20     	#if CONFIG_MODE
;;;21     		_readConfig();
;;;22     	#endif
;;;23     
;;;24     	attachButton(&button, P1, BIT2, &P12, PULL_DOWN, 150);
000002  2196              MOVS     r1,#0x96
000004  2000              MOVS     r0,#0
000006  9101              STR      r1,[sp,#4]
000008  9000              STR      r0,[sp,#0]
00000a  4b72              LDR      r3,|L1.468|
00000c  2204              MOVS     r2,#4
00000e  4972              LDR      r1,|L1.472|
000010  4872              LDR      r0,|L1.476|
000012  f7fffffe          BL       attachButton
;;;25     	GPIO_SetMode(P0, BIT4, GPIO_PMD_OUTPUT);
000016  4870              LDR      r0,|L1.472|
000018  2201              MOVS     r2,#1
00001a  2110              MOVS     r1,#0x10
00001c  3840              SUBS     r0,r0,#0x40
00001e  f7fffffe          BL       GPIO_SetMode
;;;26     }
000022  bd1c              POP      {r2-r4,pc}
;;;27     
                          ENDP

                  stopFlash PROC
;;;153     */
;;;154    void stopFlash()
000024  496b              LDR      r1,|L1.468|
;;;155    {
;;;156    	ledOff();
000026  2000              MOVS     r0,#0
000028  3928              SUBS     r1,r1,#0x28
00002a  6108              STR      r0,[r1,#0x10]
;;;157    	flash = false;
00002c  496c              LDR      r1,|L1.480|
00002e  7088              STRB     r0,[r1,#2]
;;;158    	flashed = false;
000030  70c8              STRB     r0,[r1,#3]
;;;159    }
000032  4770              BX       lr
;;;160    
                          ENDP

                  _saveConfig PROC
;;;225    
;;;226    void _saveConfig()
000034  b5f8              PUSH     {r3-r7,lr}
;;;227    {
;;;228    	stopFlash();
000036  f7fffffe          BL       stopFlash
;;;229    	SYS_UnlockReg();
00003a  f7fffffe          BL       SYS_UnlockReg
;;;230    	FMC_Open();
00003e  f7fffffe          BL       FMC_Open
;;;231    	for (uint32_t currentAddr = CONFIG_STORAGE_ADDR; currentAddr < (CONFIG_STORAGE_ADDR + 4); currentAddr += 4)
000042  4c68              LDR      r4,|L1.484|
;;;232    	{
;;;233    		FMC_Erase(CONFIG_STORAGE_ADDR);
;;;234    		FMC_Write(CONFIG_STORAGE_ADDR, flashDurationIndex);
000044  4d66              LDR      r5,|L1.480|
000046  4626              MOV      r6,r4                 ;231
000048  1d27              ADDS     r7,r4,#4              ;231
                  |L1.74|
00004a  4630              MOV      r0,r6                 ;233
00004c  f7fffffe          BL       FMC_Erase
000050  7829              LDRB     r1,[r5,#0]  ; flashDurationIndex
000052  4630              MOV      r0,r6
000054  f7fffffe          BL       FMC_Write
000058  1d24              ADDS     r4,r4,#4
00005a  42bc              CMP      r4,r7                 ;231
00005c  d3f5              BCC      |L1.74|
;;;235    	}
;;;236    	#if DEBUG_MODE
;;;237    		printf("Saved Intended:%d, Read:%d\n", flashDurationIndex + 1, FMC_Read(CONFIG_STORAGE_ADDR) + 1);
;;;238    	#endif
;;;239    	FMC_Close();
00005e  f7fffffe          BL       FMC_Close
;;;240    	SYS_LockReg();
000062  f7fffffe          BL       SYS_LockReg
;;;241    	deviceState = MAIN;
000066  2000              MOVS     r0,#0
000068  7128              STRB     r0,[r5,#4]
;;;242    }
00006a  bdf8              POP      {r3-r7,pc}
                          ENDP

                  _clickHandler PROC
;;;160    
;;;161    void _clickHandler()
00006c  495c              LDR      r1,|L1.480|
;;;162    {
;;;163    	if (++flashDurationIndex == 3)
00006e  7808              LDRB     r0,[r1,#0]  ; flashDurationIndex
000070  1c40              ADDS     r0,r0,#1
000072  b2c0              UXTB     r0,r0
000074  7008              STRB     r0,[r1,#0]
000076  2803              CMP      r0,#3
000078  d101              BNE      |L1.126|
;;;164    		flashDurationIndex = 0;
00007a  2000              MOVS     r0,#0
00007c  7008              STRB     r0,[r1,#0]
                  |L1.126|
;;;165    	#if DEBUG_MODE
;;;166    		printf("Flash Duration = %d ms\n", flashDuration[flashDurationIndex]);
;;;167    	#endif
;;;168    }
00007e  4770              BX       lr
;;;169    
                          ENDP

                  configHandler PROC
;;;96      */
;;;97     void configHandler()
000080  b5f8              PUSH     {r3-r7,lr}
;;;98     {
;;;99     	ledOn();
000082  4d54              LDR      r5,|L1.468|
000084  2601              MOVS     r6,#1
000086  3d28              SUBS     r5,r5,#0x28
000088  612e              STR      r6,[r5,#0x10]
;;;100    
;;;101    	switch (button.getButtonState(&button))
00008a  4854              LDR      r0,|L1.476|
00008c  6a41              LDR      r1,[r0,#0x24]  ; button
00008e  4788              BLX      r1
000090  2801              CMP      r0,#1
000092  d002              BEQ      |L1.154|
000094  2802              CMP      r0,#2
000096  d105              BNE      |L1.164|
000098  e002              B        |L1.160|
                  |L1.154|
;;;102    	{
;;;103    	case BUTTON_CLICK:
;;;104    		_clickHandler();
00009a  f7fffffe          BL       _clickHandler
;;;105    		break;
00009e  e001              B        |L1.164|
                  |L1.160|
;;;106    
;;;107    	case BUTTON_LONG_PRESS:
;;;108    		_saveConfig();
0000a0  f7fffffe          BL       _saveConfig
                  |L1.164|
;;;109    		break;
;;;110    
;;;111    	default:
;;;112    		break;
;;;113    	}
;;;114    
;;;115    	if (prevFlashDurationIndex != flashDurationIndex)
0000a4  4f4e              LDR      r7,|L1.480|
0000a6  7878              LDRB     r0,[r7,#1]  ; prevFlashDurationIndex
0000a8  7839              LDRB     r1,[r7,#0]  ; flashDurationIndex
0000aa  4288              CMP      r0,r1
0000ac  d014              BEQ      |L1.216|
;;;116    	{
;;;117    		for (uint8_t i = 0; i < (flashDurationIndex + 1); i++)
0000ae  2400              MOVS     r4,#0
;;;118    		{
;;;119    			ledOff();
;;;120    			CLK_SysTickDelay(1000000);
0000b0  4e4d              LDR      r6,|L1.488|
0000b2  e00b              B        |L1.204|
                  |L1.180|
0000b4  2000              MOVS     r0,#0                 ;119
0000b6  6128              STR      r0,[r5,#0x10]         ;119
0000b8  4630              MOV      r0,r6
0000ba  f7fffffe          BL       CLK_SysTickDelay
;;;121    			ledOn();
0000be  2001              MOVS     r0,#1
0000c0  6128              STR      r0,[r5,#0x10]
;;;122    			CLK_SysTickDelay(1000000);
0000c2  4630              MOV      r0,r6
0000c4  f7fffffe          BL       CLK_SysTickDelay
0000c8  1c64              ADDS     r4,r4,#1
0000ca  b2e4              UXTB     r4,r4                 ;117
                  |L1.204|
0000cc  7838              LDRB     r0,[r7,#0]            ;117  ; flashDurationIndex
0000ce  1c40              ADDS     r0,r0,#1              ;117
0000d0  4284              CMP      r4,r0                 ;117
0000d2  d3ef              BCC      |L1.180|
;;;123    		}
;;;124    		prevFlashDurationIndex = flashDurationIndex;
0000d4  7838              LDRB     r0,[r7,#0]  ; flashDurationIndex
0000d6  7078              STRB     r0,[r7,#1]
                  |L1.216|
;;;125    	}
;;;126    }
0000d8  bdf8              POP      {r3-r7,pc}
;;;127    
                          ENDP

                  flashLed PROC
;;;132     */
;;;133    void flashLed(uint32_t flashDurationInSeconds)
0000da  b570              PUSH     {r4-r6,lr}
;;;134    {
;;;135    	static uint32_t initialFlashTime = 0;
;;;136    
;;;137    	if (!flashed)
0000dc  4c40              LDR      r4,|L1.480|
0000de  4606              MOV      r6,r0                 ;134
0000e0  78e0              LDRB     r0,[r4,#3]  ; flashed
0000e2  2800              CMP      r0,#0
0000e4  d107              BNE      |L1.246|
;;;138    	{
;;;139    		ledOn();
0000e6  483b              LDR      r0,|L1.468|
0000e8  2501              MOVS     r5,#1
0000ea  3828              SUBS     r0,r0,#0x28
0000ec  6105              STR      r5,[r0,#0x10]
;;;140    		initialFlashTime = getTick();
0000ee  f7fffffe          BL       getTick
;;;141    		flashed = true;
0000f2  60e0              STR      r0,[r4,#0xc]  ; initialFlashTime
0000f4  70e5              STRB     r5,[r4,#3]
                  |L1.246|
;;;142    	}
;;;143    
;;;144    	if (getTick() - initialFlashTime >= flashDurationInSeconds)
0000f6  f7fffffe          BL       getTick
0000fa  68e1              LDR      r1,[r4,#0xc]  ; initialFlashTime
0000fc  1a40              SUBS     r0,r0,r1
0000fe  42b0              CMP      r0,r6
000100  d301              BCC      |L1.262|
;;;145    	{
;;;146    		stopFlash();
000102  f7fffffe          BL       stopFlash
                  |L1.262|
;;;147    	}
;;;148    }
000106  bd70              POP      {r4-r6,pc}
;;;149    
                          ENDP

                  buttonStateHandler PROC
;;;66      */
;;;67     void buttonStateHandler(buttonState bState)
000108  2201              MOVS     r2,#1
;;;68     {
;;;69     	switch (bState)
;;;70     	{
;;;71     	case BUTTON_CLICK:
;;;72     		flash = true;
00010a  4935              LDR      r1,|L1.480|
00010c  2801              CMP      r0,#1                 ;69
00010e  d009              BEQ      |L1.292|
000110  2802              CMP      r0,#2                 ;69
000112  d007              BEQ      |L1.292|
;;;73     		break;
;;;74     
;;;75     	case BUTTON_LONG_PRESS:
;;;76     		#if (CONFIG_MODE)
;;;77     			deviceState = CONFIG;
;;;78     		#else
;;;79     			flash = true;
;;;80     		#endif
;;;81     		break;
;;;82     
;;;83     	default:
;;;84     		break;
;;;85     	}
;;;86     
;;;87     	if (flash)
000114  7888              LDRB     r0,[r1,#2]  ; flash
000116  2800              CMP      r0,#0
000118  d006              BEQ      |L1.296|
                  |L1.282|
;;;88     		flashLed(flashDuration[flashDurationIndex]);
00011a  7808              LDRB     r0,[r1,#0]  ; flashDurationIndex
00011c  4933              LDR      r1,|L1.492|
00011e  0040              LSLS     r0,r0,#1
000120  5a08              LDRH     r0,[r1,r0]
000122  e7fe              B        flashLed
                  |L1.292|
000124  708a              STRB     r2,[r1,#2]            ;72
000126  e7f8              B        |L1.282|
                  |L1.296|
;;;89     	else
;;;90     		stopFlash();
000128  e7fe              B        stopFlash
;;;91     }
;;;92     
                          ENDP

                  stateHandler PROC
;;;31      */
;;;32     void stateHandler()
00012a  b510              PUSH     {r4,lr}
;;;33     {
;;;34     	switch (deviceState)
00012c  482c              LDR      r0,|L1.480|
00012e  7900              LDRB     r0,[r0,#4]  ; deviceState
000130  2800              CMP      r0,#0
000132  d004              BEQ      |L1.318|
000134  2801              CMP      r0,#1
000136  d101              BNE      |L1.316|
;;;35     	{
;;;36     	case MAIN:
;;;37     		buttonStateHandler(button.getButtonState(&button));
;;;38     		break;
;;;39     
;;;40     	case CONFIG:
;;;41     		configHandler();
000138  f7fffffe          BL       configHandler
                  |L1.316|
;;;42     		break;
;;;43     	}
;;;44     }
00013c  bd10              POP      {r4,pc}
                  |L1.318|
00013e  4827              LDR      r0,|L1.476|
000140  6a41              LDR      r1,[r0,#0x24]         ;37  ; button
000142  4788              BLX      r1                    ;37
000144  f7fffffe          BL       buttonStateHandler
000148  bd10              POP      {r4,pc}
;;;45     
                          ENDP

                  blinkLed PROC
;;;50      */
;;;51     void blinkLed(uint32_t blinkIntervalinMs)
00014a  b570              PUSH     {r4-r6,lr}
;;;52     {
00014c  4605              MOV      r5,r0
;;;53     	static uint32_t ledPrevTick = 0;
;;;54     
;;;55     	if (getTick() - ledPrevTick >= blinkIntervalinMs)
00014e  f7fffffe          BL       getTick
000152  4c23              LDR      r4,|L1.480|
000154  68a1              LDR      r1,[r4,#8]  ; ledPrevTick
000156  1a40              SUBS     r0,r0,r1
000158  42a8              CMP      r0,r5
00015a  d308              BCC      |L1.366|
;;;56     	{
;;;57     		toggleLed();
00015c  481d              LDR      r0,|L1.468|
00015e  3828              SUBS     r0,r0,#0x28
000160  6901              LDR      r1,[r0,#0x10]
000162  2201              MOVS     r2,#1
000164  4051              EORS     r1,r1,r2
000166  6101              STR      r1,[r0,#0x10]
;;;58     		ledPrevTick = getTick();
000168  f7fffffe          BL       getTick
00016c  60a0              STR      r0,[r4,#8]  ; ledPrevTick
                  |L1.366|
;;;59     	}
;;;60     }
00016e  bd70              POP      {r4-r6,pc}
;;;61     
                          ENDP

                  _readConfig PROC
;;;169    
;;;170    void _readConfig()
000170  b57c              PUSH     {r2-r6,lr}
;;;171    {
;;;172    	SYS_UnlockReg();
000172  f7fffffe          BL       SYS_UnlockReg
;;;173    	FMC_Open();
000176  f7fffffe          BL       FMC_Open
;;;174    	_set_data_flash_base(CONFIG_STORAGE_ADDR);
00017a  4d1a              LDR      r5,|L1.484|
00017c  2102              MOVS     r1,#2
00017e  462c              MOV      r4,r5
000180  4668              MOV      r0,sp
000182  f7fffffe          BL       FMC_ReadConfig
000186  2800              CMP      r0,#0
000188  db16              BLT      |L1.440|
00018a  9800              LDR      r0,[sp,#0]
00018c  07c0              LSLS     r0,r0,#31
00018e  d102              BNE      |L1.406|
000190  9801              LDR      r0,[sp,#4]
000192  42a0              CMP      r0,r4
000194  d010              BEQ      |L1.440|
                  |L1.406|
000196  f7fffffe          BL       FMC_EnableConfigUpdate
00019a  9800              LDR      r0,[sp,#0]
00019c  2102              MOVS     r1,#2
00019e  0840              LSRS     r0,r0,#1
0001a0  0040              LSLS     r0,r0,#1
0001a2  9000              STR      r0,[sp,#0]
0001a4  9401              STR      r4,[sp,#4]
0001a6  4668              MOV      r0,sp
0001a8  f7fffffe          BL       FMC_WriteConfig
0001ac  2800              CMP      r0,#0
0001ae  db03              BLT      |L1.440|
0001b0  2001              MOVS     r0,#1
0001b2  2105              MOVS     r1,#5
0001b4  0709              LSLS     r1,r1,#28
0001b6  6088              STR      r0,[r1,#8]
                  |L1.440|
;;;175    	uint32_t temp = FMC_Read(CONFIG_STORAGE_ADDR);
0001b8  4628              MOV      r0,r5
0001ba  f7fffffe          BL       FMC_Read
;;;176    
;;;177    	if (temp <= nrOfElements)
0001be  2803              CMP      r0,#3
0001c0  d802              BHI      |L1.456|
;;;178    	{
;;;179    		#if DEBUG_MODE
;;;180    			printf("Config Read Successfully, %d \n", (temp + 1));
;;;181    		#endif
;;;182    		flashDurationIndex = temp;
0001c2  4907              LDR      r1,|L1.480|
0001c4  7008              STRB     r0,[r1,#0]
;;;183    		prevFlashDurationIndex = flashDurationIndex;
0001c6  7048              STRB     r0,[r1,#1]
                  |L1.456|
;;;184    	}
;;;185    	else
;;;186    	{
;;;187    		#if DEBUG_MODE
;;;188    			printf("Invalid Config, %d\n", (temp + 1));
;;;189    		#endif
;;;190    	}
;;;191    	FMC_Close();
0001c8  f7fffffe          BL       FMC_Close
;;;192    	SYS_LockReg();
0001cc  f7fffffe          BL       SYS_LockReg
;;;193    }
0001d0  bd7c              POP      {r2-r6,pc}
;;;194    
                          ENDP

0001d2  0000              DCW      0x0000
                  |L1.468|
                          DCD      0x50004228
                  |L1.472|
                          DCD      0x50004040
                  |L1.476|
                          DCD      ||.bss||
                  |L1.480|
                          DCD      ||.data||
                  |L1.484|
                          DCD      0x00003ffc
                  |L1.488|
                          DCD      0x000f4240
                  |L1.492|
                          DCD      ||.constdata||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  button
                          %        40

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  flashDuration
000000  4e207530          DCW      0x4e20,0x7530
000004  ea60              DCW      0xea60

                          AREA ||area_number.6||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.6||, ||.constdata||
                  nrOfElements
000000  03                DCB      0x03

                          AREA ||.data||, DATA, ALIGN=2

                  flashDurationIndex
000000  01                DCB      0x01
                  prevFlashDurationIndex
000001  01                DCB      0x01
                  flash
000002  00                DCB      0x00
                  flashed
000003  00                DCB      0x00
                  deviceState
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  ledPrevTick
                          DCD      0x00000000
                  initialFlashTime
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\flasher.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_flasher_c_fdae0ba8____REV16|
#line 388 "..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___9_flasher_c_fdae0ba8____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_flasher_c_fdae0ba8____REVSH|
#line 402
|__asm___9_flasher_c_fdae0ba8____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
